{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.d288bba9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react';\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props){\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) =>{\n        event.preventDefault()\n        // console.log(event)\n        // console.log(textAreaRef.current.value)\n        const newVal = textAreaRef.current.value\n        // console.log(newVal)\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content : newVal,\n            likes : 0,\n            id: 12321\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}> \n    <div className=\"col-12 mb-3\">\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} name = \"tweet\"  className=\"form-control\"></textarea>\n            <button type=\"submit\" className=\"btn btn-primary my-3\">Tweet Now</button>\n            \n        </form>\n    </div>\n    <TweetsList newTweets={newTweets}/>\n    </div>\n    \n}\n\nexport function TweetsList(props){\n    \n   const [tweetsInit, setTweetsInit] = useState([])\n   const [tweets, setTweets] = useState([])\n   //setTweetsInit([...props.newTweets].concat(tweetsInit))\n    useEffect(()=>{\n        const final =[...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n        \n    },[props.newTweets,tweets,tweetsInit])\n  useEffect(()=>{\n   \n    const myCallback = (response, status) =>{\n      if (status === 200){\n        setTweetsInit(response)\n      }\n      else{\n        alert(\"There was an error\")\n      }\n      \n    }\n    //do my lookup\n    loadTweets(myCallback)\n    \n  }, [tweetsInit])\n  return tweets.map((item, index)=>{\n        return <Tweet tweet={item}  className=\"my-5 py-5 border bg-white text-dark\" key ={`${index}-{item.id}`}/>\n        })\n}\n\n\n\nexport function ActionBtn(props){\n   const {tweet, action} = props\n   const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n   const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n   const className= props.className ?props.className : 'btn btn-info btn-small'\n   const actionDisplay = action.display ? action.display: 'Action'\n   const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n   const handleClick =(event) =>{\n       event.preventDefault()\n       if (action.type === 'like'){\n            if(userLike === true){\n                //perhaps i unlike it?\n                setLikes(likes - 1)\n                setUserLike(false)\n            }\n            else{\n                setLikes(likes+1)\n                setUserLike(true)\n            }\n       }\n       \n   }\n        return <button className={className} onClick={handleClick}>{display}</button>\n    }\n\nexport function Tweet(props){\n  const {tweet} = props\n  const className= props.className ?props.className : ' col-10 mx-auto col-md-6 '\n  return (\n    <div className={className}>\n    <p>{tweet.id} - {tweet.content}</p>\n    <div className='btn btn-group'>\n      <ActionBtn tweet={tweet} action = {{type:\"like\", display:\"Likes\"}}/>\n      <ActionBtn tweet={tweet} action = {{type:\"unlike\", display:\"Unlike\"}}/>\n      <ActionBtn tweet={tweet} action = {{type:\"retweet\", display:\"Retweet\"}}/>\n    </div>\n    </div>\n  )\n}","export function loadTweets(callback){\n        const xhr = new XMLHttpRequest()      // xhr = SomeClass()\n        const method = 'GET'                //'POST'\n        const url = 'http://localhost:8000/api/tweets'\n        const responseType = \"json\"\n\n        xhr.responseType = responseType\n        xhr.open(method, url)\n        xhr.onload = function () {\n          callback(xhr.response, xhr.status)\n        }\n        xhr.onerror = function (e){\n          console.log(e)\n          callback({\"message\": \"The request was an error\"}, 400)\n        }\n         xhr.send()\n        }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n        <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from './tweets';\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n    <App />, appEl);\n}\nconst tweetsEl = document.getElementById('tweetme-2')\nif (tweetsEl){\n  ReactDOM.render(\n    <TweetsComponent />, tweetsEl);\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}